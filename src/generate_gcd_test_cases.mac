/* SPDX-License-Identifier: LGPL-2.1-or-later
 * See Notices.txt for copyright information
 *
 * Maxima program to generate the test cases for Polynomial::<Ratio<_>>::gcd_lcm
 *
 * run by using:
 * maxima -b generate_gcd_test_cases.mac
 */

number_to_text(v):=block(
    [n, d],
    n:num(v),
    d:denom(v),
    if d=1 then return(concat("ri(", n, ")")),
    concat("r(", n, ", ", d, ")")
)$

poly_to_text(p):=block(
    [p:ratexpand(p),l],
    if equal(p, 0) then return("Zero::zero()"),
    if hipow(p, x)=0 then (
        return(concat(number_to_text(p), ".into()"))
    ),
    l:makelist(
        [number_to_text(ratcoef(p, x, i)), ", "],
        i,
        0,
        hipow(p, x)),
    l:reverse(rest(reverse(flatten(l)))),
    apply(concat, append(["vec!["], l, ["].into()"]))
)$

n:20000$
thru n do block(
    [a, b, g, l],
    a:sum(random(3)*x^i, i, 0, 3)/(random(3)+1),
    b:sum(random(3)*x^i, i, 0, 3)/(random(3)+1),
    g:content(gcd(a, b), x)[2],
    l:a*b,
    if notequal(g, 0) then l:l/g,
    l:ratsimp(l),
    if notequal(g, 1) or random(n) < 10 then (
        printf(
            true,
            "test_case(~%    ~a,~%    ~a,~%    ~a,~%    ~a,~%);~%",
            poly_to_text(a),
            poly_to_text(b),
            poly_to_text(g),
            poly_to_text(l)
        )
    )
)$
